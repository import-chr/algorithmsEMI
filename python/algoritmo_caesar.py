# -*- coding: utf-8 -*-
"""algoritmo-caesar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BKV9NsYCjl95Hi0HBPQuB5gdOVHf4c41

# Algoritmo de Cesar

---
uso de alfabeto de 27 caracteres
"""

alphabet = "abcdefghijklmnñopqrstuvwxyz"
alphabet_upper = "ABCDEFGHIJKLMNÑOPQRSTUVWXYZ"

"""# Cifrado (Caesar)

`C = M + [k mod |A|]`
"""

message = input("Ingrese la frase a cifrar: ")
key = int(input("Ingrese la llave de cifrado: "))
alpha = len(alphabet)

def getIdM(m, i = 0):
  return alphabet.find(m[i])

def cesar(m, k, a):
  arrN = []

  for i in range(len(m)):
    arrN.append(getIdM(m, i) + (k % a))
  
  return arrN

def toStr(arr, a):
  arrC = []

  for i in range(len(arr)):
    arrC.append(a[arr[i] % alpha])
  
  cad = "".join(arrC)

  return cad

caesarArr = cesar(message, key, alpha)

caesarStr = toStr(caesarArr, alphabet)

print(f"cesar (cifrado): {caesarStr}")

"""# Descifrado (Caesar)

`M = C - [k mod |A|]`
"""

caesarText = input("Ingrese la frase a descifrar: ")
key = int(input("Ingrese la llave de descifrado: "))
alpha = len(alphabet_upper)

def getIdM(m, i = 0):
  return alphabet_upper.find(m[i])

def message(m, k, a):
  arrN = []

  for i in range(len(m)):
    arrN.append(getIdM(m, i) - (k % a))
  
  return arrN

def toStr(arr, a):
  arrM = []

  for i in range(len(arr)):
    arrM.append(a[arr[i]])
  
  cad = "".join(arrM)

  return cad

messageArr = message(caesarText, key, alpha)

messageStr = toStr(messageArr, alphabet_upper)

print(f"cesar (descifrado): {messageStr}")